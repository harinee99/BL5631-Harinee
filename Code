# library function is used to load and attach add-on packages.
library(Biobase)
library(GEOquery)
library(limma)
library(oligo)
library(oligoClasses)
library(RColorBrewer)

# to load data from GEO
gse <- getGEO("GSE50737", GSEMatrix = TRUE, AnnotGPL = TRUE)
if(length(gse) > 1) idx <- grep("GPL16686", attr(gse, "names")) else idx <- 1
gse <- gse[[idx]]

# to make proper column names to match the top table
fvarLabels(gse) <- make.names(fvarLabels(gse))

# making each sample a member of a group
gsm <- "1111222000"
sml <- strsplit(gsm, split="")[[1]]

# log2 transformation
ex <- exprs(gse)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
          (qx[6]-qx[1] > 50 && qx[2] > 0)
if (LogC) { ex[which(ex <= 0)] <- NaN
  exprs(gse) <- log2(ex) }
  
# normalization of data set  
exprs(gse) <- normalizeBetweenArrays(exprs(gse))

# assigning samples to the groups and setting up the design matrix
sam <- factor(sml)
groups <- make.names(c("control","benzene poisoning","benzene exposed"))
levels(sam) <- groups
gse$group <- sam
design <- model.matrix(~group + 0, gse)
colnames(design) <- levels(sam)

# fit linear model
fit <- lmFit(gse, design)

# setting up contrasts of interest and recalculating model coefficients
con <- paste(groups, c(tail(groups, -1), head(groups, 1)), sep="-")
contrast.matrix <- makeContrasts(contrasts=con, levels=design)
fit.con <- contrasts.fit(fit, contrast.matrix)

# to get a table with all significant genes
fit.eb <- eBayes(fit.con, 0.01)
tT <- topTable(fit.eb, adjust="fdr", sort.by="B", number=250)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","F","RANGE_STRAND","RANGE_START","RANGE_END","GB_ACC","SPOT_ID","RANGE_GB"))
write.table(tT, file=stdout(), row.names=F, sep="\t")

topTable(fit.eb)

# to make a histogram. It assumed that all genes aren't differentially expressed in the data set.
tT2 <- topTable(fit.eb, adjust="fdr", sort.by="B", number=Inf)
hist(tT2$adj.P.Val, col = "grey", border = "white", xlab = "P-adj", ylab = "Number of genes", main = "P-adj value distribution")

# summarizing test results as "up", "down" or "not expressed" using decideTests()
dT <- decideTests(fit.eb, adjust.method="fdr", p.value=0.05)

#for Venn diagram
vennDiagram(dT, circle.col=palette())

# to get volcano plots for log P-value vs log fold change
colnames(fit.eb)
ct <- 1 # control - benzene poisoning
volcanoplot(fit.eb, coef=ct, main=colnames(fit2)[ct], pch=20, highlight=length(which(dT[,ct]!=0)), names=rep('+', nrow(fit2)))
ct <- 2 # benzene poisoning - benzene exposed
volcanoplot(fit.eb, coef=ct, main=colnames(fit2)[ct], pch=20, highlight=length(which(dT[,ct]!=0)), names=rep('+', nrow(fit2)))
ct <- 3 # benzene exposed - control
volcanoplot(fit.eb, coef=ct, main=colnames(fit2)[ct], pch=20, highlight=length(which(dT[,ct]!=0)), names=rep('+', nrow(fit2)))

# to get MD plot which gives the log fold change vs mean log expression
plotMD(fit.eb, column=ct, status=dT[,ct], legend=F, pch=20, cex=1)

# General expression data analysis
ex <- exprs(gse)

# to get a density plot for expression value distribution
par(mar=c(4,4,2,1))
title <- paste ("GSE50737", "/", annotation(gset), " value distribution", sep ="")
plotDensities(ex, group=sam, main=title, legend ="topright")

#to get a mean variance plot
plotSA(fit.eb, main="Mean variance trend, GSE50737")

#to get heatmap
tT2 <- topTable(fit.eb, lfc=2, p.value = 0.05, number=100)
hm <- gse[rownames(tT2),]
heatmap(exprs(hm))

#to get pheatmap
pheatmap(hm)

#to get heatmap specifically for treatments
heatmap(exprs(hm), labCol=gse[['treatment:ch1']] ,labRow=NA, col = rev(brewer.pal(10, "RdBu")), distfun = function(x) as.dist(1-cor(t(x))))
